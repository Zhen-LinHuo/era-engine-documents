<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Design of ERA-Engine (Godot)" id="Design-of-ERA-Engine-Godot">

    <p>Briefing of system architecture and design principle of ERA-Engine (Godot).</p>

	<show-structure for="chapter" />

	<chapter id="Introduction.DesignIntro.Design">
		<title>Design Principle</title>

		<chapter id="Introduction.DesignIntro.FSM" collapsible="true">
			<title>Finite State Machine (FSM)</title>

			<p>
				<code>Finite State Machine</code> (<code>FSM</code>) is a system that has a finite number of states. It is a model of computation used to design both computer programs and sequential logic circuits.
			</p>

			<p>
				All data, status and other information of the programme can be regarded as a <code>state</code>, and at any specific given time, the system always have limited possible states, thus this kind of architecture is called <code>Finite State Machine</code>.
			</p>

			<p>
				ERA-Engine (Godot) implemented this <code>FSM</code> pattern into the system, introducing <code>FSM Mode</code> as a brand-new coding mode for ERA game and other text-based games.
			</p>

			<p>
				In ERA-Engine, any status can be regarded as a <code>state</code>, and the status transition can be regarded as a <code>transition</code>: layout of UI, gaming progress, etc. So in fact, the whole game process can be understanded as a procedure switching between different <code>states</code>.
			</p>

		</chapter>

		<chapter id="Introduction.DesignIntro.MVC" collapsible="true">
			<title>MVC Pattern</title>

			<p>
				<code>Model-View-Controller</code> (<code>MVC</code>) is a typical design pattern on programming. The programme can be regarded as 3 parts: <code>Model</code>, <code>View</code> and <code>Controller</code>.
			</p>

			<img src="MVC.png" alt="Structure and Logic of MVC Pattern" width="300"/>

			<p>
				Generally, <code>view</code> is what users will see, <code>model</code> represents database, and <code>controller</code> is the code logic of the programme. Anytime when status on <code>view</code> updates, controller will handle the main logic, and ask to look up data in <code>model</code>, master on computation and finally update any detail to <code>view</code>. Thus, the programme is divided into 3 isolated parts, making the programme more mordulised and robust.
			</p>

		</chapter>

	</chapter>

	<chapter id="Introduction.DesignIntro.Architecture">
		<title>System Architecture</title>

		<chapter id="Introduction.DesignIntro.Architecture.Overview" collapsible="false">
			<title>Overview</title>

			<p>
				In general, to create a game with ERA-Engine, there are 2 main parts you need to concentrate on:
			</p>

			<list>
				<li><code>State</code>: Your arrangement and content of interface</li>
				<li><code>Data</code>: All data files, including <code>character</code>, <code>kojo</code>, <code>item</code>, etc.</li>
			</list>

			<p>
				Then, based on these two parts, you can customise the logic behind each <code>UI unit</code> in a state under the <code>FSM</code> pattern, thus construct the whole logic of your game.
			</p>

			<tip>Want a quick start? Visit the <a href="Setting-States.topic">start-up tutorial</a>.</tip>

		</chapter>

	</chapter>

</topic>